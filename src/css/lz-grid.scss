@import 'lz-variables';

/* 
	In PodcastPage.js there is some logic surrounding columns that 
	may need to be changed as well if anything here is changed about 
	the number of columns that exist in the grid.
 */

.lz-grid {
	display: grid;
	grid-template-columns: repeat(4, 1fr);
	grid-column-gap: $lz-padding / 2;
	grid-row-gap: $lz-padding / 2;

	@media screen and (max-width: $break-small) {
		grid-template-columns: repeat(2, auto);
	}
}

button.lz-col {
	cursor: pointer;
}

.lz-col {
	padding: 0;
	background: transparent;

	img {
		@include ThumbnailShadowHover();
	}

	img.selected {
		@include ThumbnailDark();
	}
}

.filler {
	background: red;
	height: 0;
}

.lz-modal-col-side {
	flex-basis: 15%; 
	text-align: center;
}

.lz-modal-col-center {
	flex-basis: 70%;
	display: flex;
	align-items: center;
	justify-content: center;
}

.lz-modal-img {
	max-width: 100%;
	max-height: 90vh;
}

.lz-grid-with-drawer-mobile {
	@include hide-desktop();
}

.lz-grid-with-drawer-desktop {
	@include hide-mobile();
}

.lz-drawer-wrapper {
	align-self: start;
	grid-column-start: 1;
	grid-column-end: 5;
	grid-row-start: 1;
	grid-row-end: 2;

	@media screen and (max-width: $break-small) {
		grid-column-start: 1;
		grid-column-end: 3;
	}
}

.lz-drawer {
	$pinch-width: 15px;
	width: 100%;
	background: $light-blue;
	margin-top: $lz-padding;
	box-shadow: 0px 0px $pinch-width ($pinch-width / 3) rgba(0,0,0,0.25);

	.pinch-row {
		position: relative;
		top: -1 * $pinch-width;
	}

	.lz-col {
		height: $pinch-width;
		display: flex;
		align-items: center;
		justify-content: center;
		margin-top: 0;
	}

	.pinch-arrow {
		@include PinchArrow($light-blue, $pinch-width);
	}

	.inner-drawer {
		$drawer-padding: $lz-padding / 2;
		padding-top: $drawer-padding - $pinch-width;
		padding-bottom: $drawer-padding;
		display: flex;
		flex-direction: row;
		@media screen and (max-width: $break-small) {
			flex-direction: column;
		}

		& > div {
			padding: 0 $drawer-padding;
			flex-grow: 1;
		}

		.drawer-player {
			order: -1;
			@media screen and (max-width: $break-small) {
				order: 1;
			}
		}

		h4 {
			margin: 0;
			text-align: left;
		}

		p {
			margin: $drawer-padding 0;
		}

		.close-drawer {
			float: right;
			margin-left: $drawer-padding;
			padding: 0;
			background: transparent;
			cursor: pointer;
		}
	}
}

@for $i from 1 through 10 {
	.after-row-#{$i} {
		grid-row-start: $i + 1;
		grid-row-end: $i + 2;
	}
}

@for $i from 1 through 4 {
	.after-col-#{$i} {
		grid-column-start: $i + 1;
		grid-column-end: $i + 2;
	}
}

.lz-modal {
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100vh;
	background: rgba(#000, .9);
	display: flex;
	flex-direction: row;
	align-items: center;
	justify-content: center;
	font-size: 1.5em;
	color: #fff;

	a {
		background: rgba(#fff, .85);
		color: $dark-gray;
		border-radius: .1em;
		padding: .25em;
		text-decoration: none;
	}

	.a-disabled {
		background: rgba(#fff, .85);
		color: $dark-gray;
		border-radius: .1em;
		padding: .25em;
		text-decoration: none;
		opacity: .2;
	}
}

.no-script-tile-link {
	position: relative;
	display: block;
	width: $col-width;
	height: $col-width;
	margin-top: -1 * $col-width;
	@media screen and (max-width: $break-small) {
		width: 47.5%;
		height: 47.5%;
		margin-top: -47.5%;
	}
}